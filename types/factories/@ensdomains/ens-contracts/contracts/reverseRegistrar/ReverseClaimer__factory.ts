/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ReverseClaimer,
  ReverseClaimerInterface,
} from "../../../../../@ensdomains/ens-contracts/contracts/reverseRegistrar/ReverseClaimer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ENS",
        name: "ens",
        type: "address",
      },
      {
        internalType: "address",
        name: "claimant",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052346100295761001a6100146100ed565b906101b2565b60405160166102c68239601690f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006557604052565b61002e565b9061007e61007760405190565b9283610044565b565b6001600160a01b031690565b90565b6001600160a01b0381165b0361002957565b9050519061007e8261008f565b6001600160a01b03811661009a565b9050519061007e826100ae565b91906040838203126100295761008c906100e481856100a1565b936020016100bd565b61010b6102dc803803806101008161006a565b9283398101906100ca565b9091565b61008c90610080906001600160a01b031682565b61008c9061010f565b61008c90610123565b61008c61008c61008c9290565b61008c7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610135565b906020828203126100295761008c916100bd565b6040513d6000823e3d90fd5b8061009a565b9050519061007e8261018b565b906020828203126100295761008c91610191565b60206101c06101f69261012c565b6302571be3906101e86101d1610142565b926101db60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa9182156102935761022161021c61025894602094600091610298575b5061012c565b61012c565b6102416000631e83409a61023460405190565b9687958694859360e01b90565b83526001600160a01b031660048301526024820190565b03925af18015610293576102695750565b6102899060203d811161028c575b6102818183610044565b81019061019e565b50565b503d610277565b61017f565b6102b89150853d81116102be575b6102b08183610044565b81019061016b565b38610216565b503d6102a656fe6080604052600080fdfea164736f6c6343000814000a";

type ReverseClaimerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReverseClaimerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReverseClaimer__factory extends ContractFactory {
  constructor(...args: ReverseClaimerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    ens: PromiseOrValue<string>,
    claimant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReverseClaimer> {
    return super.deploy(
      ens,
      claimant,
      overrides || {}
    ) as Promise<ReverseClaimer>;
  }
  override getDeployTransaction(
    ens: PromiseOrValue<string>,
    claimant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(ens, claimant, overrides || {});
  }
  override attach(address: string): ReverseClaimer {
    return super.attach(address) as ReverseClaimer;
  }
  override connect(signer: Signer): ReverseClaimer__factory {
    return super.connect(signer) as ReverseClaimer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReverseClaimerInterface {
    return new utils.Interface(_abi) as ReverseClaimerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReverseClaimer {
    return new Contract(address, _abi, signerOrProvider) as ReverseClaimer;
  }
}
