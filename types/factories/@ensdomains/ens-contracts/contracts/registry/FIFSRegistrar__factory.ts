/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  FIFSRegistrar,
  FIFSRegistrarInterface,
} from "../../../../../@ensdomains/ens-contracts/contracts/registry/FIFSRegistrar";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ENS",
        name: "ensAddr",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523461002b5761001a6100146100e6565b9061017d565b60405161043c610194823961043c90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006757604052565b610030565b9061008061007960405190565b9283610046565b565b6001600160a01b031690565b90565b6001600160a01b0381165b0361002b57565b9050519061008082610091565b8061009c565b90505190610080826100b0565b919060408382031261002b5761008e906100dd81856100a3565b936020016100b6565b6101046105d0803803806100f98161006c565b9283398101906100c3565b9091565b906001600160a01b03905b9181191691161790565b61008e90610082906001600160a01b031682565b61008e9061011d565b61008e90610131565b9061015361008e61015a9261013a565b8254610108565b9055565b9060001990610113565b9061017661008e61015a9290565b825461015e565b9061018c610080926000610143565b600161016856fe6080604052600436101561001257600080fd5b60003560e01c63d22057a903610030576100ac565b805b0361003057565b600080fd5b9050359061004282610027565b565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff8116610029565b9050359061004282610060565b91906040838203126100305761005d906100a38185610035565b9360200161007c565b34610030576100c56100bf366004610089565b90610425565b604051005b61004461005d61005d9273ffffffffffffffffffffffffffffffffffffffff1690565b61005d906100ca565b61005d906100ed565b61005d9081565b61005d90546100ff565b602081610121610127938396959052565b01918252565b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761019a57604052565b61012b565b9050519061004282610060565b906020828203126100305761005d9161019f565b6040513d6000823e3d90fd5b61004461005d61005d9290565b61005d906101cc565b1561003057565b9061028a91602061021761021260005473ffffffffffffffffffffffffffffffffffffffff1690565b6100f6565b6302571be39061027c61022a6001610106565b61025261023660405190565b8092610246898984019283610110565b9081038252038261015a565b61026461025d825190565b9160200190565b209261026f60405190565b9788948593849360e01b90565b835260048301526024820190565b03915afa92831561032c57610042936102d9916000916102fe575b506102b361004460006101d9565b73ffffffffffffffffffffffffffffffffffffffff8216149081156102de575b506101e2565b61038b565b33915073ffffffffffffffffffffffffffffffffffffffff1614386102d3565b61031f915060203d8111610325575b610317818361015a565b8101906101ac565b386102a5565b503d61030d565b6101c0565b9050519061004282610027565b906020828203126100305761005d91610331565b90815260608101939261004292909160409161036f906020830152565b019073ffffffffffffffffffffffffffffffffffffffff169052565b906020906103b161021260005473ffffffffffffffffffffffffffffffffffffffff1690565b6103df60006306ab59236103ea6103c86001610106565b956103d260405190565b9889978896879560e01b90565b855260048501610352565b03925af1801561032c576103fb5750565b61041b9060203d811161041e575b610413818361015a565b81019061033e565b50565b503d610409565b90610042916101e956fea164736f6c6343000814000a";

type FIFSRegistrarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FIFSRegistrarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FIFSRegistrar__factory extends ContractFactory {
  constructor(...args: FIFSRegistrarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    ensAddr: PromiseOrValue<string>,
    node: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FIFSRegistrar> {
    return super.deploy(
      ensAddr,
      node,
      overrides || {}
    ) as Promise<FIFSRegistrar>;
  }
  override getDeployTransaction(
    ensAddr: PromiseOrValue<string>,
    node: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(ensAddr, node, overrides || {});
  }
  override attach(address: string): FIFSRegistrar {
    return super.attach(address) as FIFSRegistrar;
  }
  override connect(signer: Signer): FIFSRegistrar__factory {
    return super.connect(signer) as FIFSRegistrar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FIFSRegistrarInterface {
    return new utils.Interface(_abi) as FIFSRegistrarInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FIFSRegistrar {
    return new Contract(address, _abi, signerOrProvider) as FIFSRegistrar;
  }
}
