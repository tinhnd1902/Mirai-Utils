/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ENSRegistry,
  ENSRegistryInterface,
} from "../../../../../@ensdomains/ens-contracts/contracts/registry/ENSRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewOwner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "resolver",
        type: "address",
      },
    ],
    name: "NewResolver",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "ttl",
        type: "uint64",
      },
    ],
    name: "NewTTL",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "recordExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "resolver",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "ttl",
        type: "uint64",
      },
    ],
    name: "setRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "resolver",
        type: "address",
      },
    ],
    name: "setResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubnodeOwner",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "resolver",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "ttl",
        type: "uint64",
      },
    ],
    name: "setSubnodeRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "ttl",
        type: "uint64",
      },
    ],
    name: "setTTL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "ttl",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234610023576100116100b2565b604051610b30620000cb8239610b3090f35b600080fd5b6100356100356100359290565b90565b9061004290610028565b600052602052604060002090565b61003590610064906001600160a01b031682565b6001600160a01b031690565b61003590610050565b61003590610070565b906100926100356100ae92610079565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6100c83360006100c28180610038565b01610082565b56fe6080604052600436101561001257600080fd5b60003560e01c80630178b8bf146100d257806302571be3146100cd57806306ab5923146100c857806314ab9038146100c357806316a25cbd146100be5780631896f70a146100b95780635b0fc9c3146100b45780635ef2c7f0146100af578063a22cb465146100aa578063cf408823146100a5578063e985e9c5146100a05763f79fe538036100e057610454565b610425565b6103ef565b61039a565b610346565b6102e1565b6102c8565b61026e565b610250565b6101e4565b610170565b610144565b805b036100e057565b600080fd5b905035906100f2826100d7565b565b906020828203126100e057610108916100e5565b90565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff909116815260200190565b346100e05761016c61015f61015a3660046100f4565b610985565b6040515b91829182610124565b0390f35b346100e05761016c61015f6101863660046100f4565b610933565b73ffffffffffffffffffffffffffffffffffffffff81166100d9565b905035906100f28261018b565b90916060828403126100e0576101086101cd84846100e5565b936101db81602086016100e5565b936040016101a7565b346100e05761016c6102006101fa3660046101b4565b916106f7565b6040519182918290815260200190565b67ffffffffffffffff81166100d9565b905035906100f282610210565b91906040838203126100e0576101089061024781856100e5565b93602001610220565b346100e05761026961026336600461022d565b90610895565b604051005b346100e05761016c6102896102843660046100f4565b6109b4565b6040515b9182918267ffffffffffffffff909116815260200190565b91906040838203126100e057610108906102bf81856100e5565b936020016101a7565b346100e0576102696102db3660046102a5565b906107b4565b346100e0576102696102f43660046102a5565b906105be565b919060a0838203126100e05761031081846100e5565b9261031e82602083016100e5565b9261010861032f84604085016101a7565b9361033d81606086016101a7565b93608001610220565b346100e0576102696103593660046102fa565b93929092610483565b8015156100d9565b905035906100f282610362565b91906040838203126100e0576101089061039181856101a7565b9360200161036a565b346100e0576102696103ad366004610377565b906108bf565b6080818303126100e0576103c782826100e5565b926101086103d884602085016101a7565b936103e681604086016101a7565b93606001610220565b346100e0576102696104023660046103b3565b9291909161046f565b91906040838203126100e057610108906102bf81856101a7565b346100e05761016c61044161043b36600461040b565b90610a14565b6040515b91829182901515815260200190565b346100e05761016c61044161046a3660046100f4565b6109cb565b61047e6100f2949392826105be565b610a40565b9161047e916100f29594936106f7565b905b600052602052604060002090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b61010b6101086101089273ffffffffffffffffffffffffffffffffffffffff1690565b610108906104bd565b610108906104e0565b90610495906104e9565b5460ff1690565b156100e057565b906100f29161055061052760006105218482610493565b016104a3565b338073ffffffffffffffffffffffffffffffffffffffff831614918215610555575b5050610503565b61057a565b61057392509061056961056e9260016104f2565b6104f2565b6104fc565b3880610549565b6105848282610a2f565b6105b96105af7fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d2669290565b9261016360405190565b0390a2565b906100f29161050a565b906101089392916105e161052760006105218582610493565b610664565b01918252565b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff82111761065f57604052565b6105f0565b5060405190929190610697816020810161068b8588836020816105e66105ec938396959052565b9081038252038261061f565b6106a96106a2825190565b9160200190565b20926106b58385610a2f565b6106f16106e76106e37fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e829390565b9390565b9361016360405190565b0390a390565b61010892919060006105c8565b906100f29161071b61052760006105218482610493565b61075d565b9073ffffffffffffffffffffffffffffffffffffffff905b9181191691161790565b90610752610108610759926104e9565b8254610720565b9055565b9060016107ae6100f2937f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a061078f8290565b9061079960405190565b806107a48882610124565b0390a26000610493565b01610742565b906100f291610704565b906100f2916107d561052760006105218482610493565b61083c565b907bffffffffffffffff00000000000000000000000000000000000000009060a01b610738565b6108186101086101089267ffffffffffffffff1690565b67ffffffffffffffff1690565b9061083561010861075992610801565b82546107da565b90600161088f6100f2937f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa6861086e8290565b9061087860405190565b67ffffffffffffffff8716815280602081016107a4565b01610825565b906100f2916107be565b9060ff90610738565b906108b861010861075992151590565b825461089f565b336108d8836108d3846105698560016104f2565b6108a8565b61091861090e6109087f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31936104e9565b936104e9565b9361044560405190565b0390a3565b61010b6101086101089290565b6101089061091d565b61094e61052191610942600090565b50600092839182610493565b9061095b61010b306104e9565b73ffffffffffffffffffffffffffffffffffffffff83161461097b575090565b610108915061092a565b600161052161010892610996600090565b506000610493565b6101089060a01c610818565b610108905461099e565b60016109c561010892610996600090565b016109aa565b610a0f6109f561010b6109ef610521946109e3600090565b50600095869182610493565b9361092a565b9173ffffffffffffffffffffffffffffffffffffffff1690565b141590565b6101089161056961056e92610a27600090565b5060016104f2565b906100f2916107ae60009182610493565b90600090610a5661010b60016105218686610493565b73ffffffffffffffffffffffffffffffffffffffff821603610ae0575b50610a8661081860016109c58585610493565b67ffffffffffffffff841603610a9b57505050565b82600161088f84610aab94610493565b6105b9610ad67f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa689290565b9261028d60405190565b610af08160016107ae8686610493565b7f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0610b1a846105af565b0390a238610a7356fea164736f6c6343000814000a";

type ENSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ENSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ENSRegistry__factory extends ContractFactory {
  constructor(...args: ENSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ENSRegistry> {
    return super.deploy(overrides || {}) as Promise<ENSRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ENSRegistry {
    return super.attach(address) as ENSRegistry;
  }
  override connect(signer: Signer): ENSRegistry__factory {
    return super.connect(signer) as ENSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ENSRegistryInterface {
    return new utils.Interface(_abi) as ENSRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ENSRegistry {
    return new Contract(address, _abi, signerOrProvider) as ENSRegistry;
  }
}
