/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BytesUtils,
  BytesUtilsInterface,
} from "../../../../../@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "OffsetOutOfBoundsError",
    type: "error",
  },
];

const _bytecode =
  "0x608060405234601a5760405160166020823930815050601690f35b600080fdfe6080604052600080fdfea164736f6c6343000814000a";

type BytesUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BytesUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BytesUtils__factory extends ContractFactory {
  constructor(...args: BytesUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BytesUtils> {
    return super.deploy(overrides || {}) as Promise<BytesUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BytesUtils {
    return super.attach(address) as BytesUtils;
  }
  override connect(signer: Signer): BytesUtils__factory {
    return super.connect(signer) as BytesUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BytesUtilsInterface {
    return new utils.Interface(_abi) as BytesUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BytesUtils {
    return new Contract(address, _abi, signerOrProvider) as BytesUtils;
  }
}
