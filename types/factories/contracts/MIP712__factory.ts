/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MIP712, MIP712Interface } from "../../contracts/MIP712";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "version_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523462000065576200002062000019620001ad565b90620001d4565b60405161062a620006cd823960805181505060a05181505060c05181505060e05181505061010051815050610120518161034401526101405181610371015261062a90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000a257604052565b6200006a565b90620000bf620000b760405190565b928362000080565b565b6001600160401b038111620000a257602090601f01601f19160190565b0190565b60005b838110620000f65750506000910152565b8181015183820152602001620000e5565b90929192620001206200011a82620000c1565b620000a8565b938185526020850190828401116200006557620000bf92620000e2565b9080601f83011215620000655781516200015a9260200162000107565b90565b919091604081840312620000655780516001600160401b0381116200006557836200018a9183016200013d565b60208201519093906001600160401b03811162000065576200015a92016200013d565b620001d062000cf780380380620001c481620000a8565b9283398101906200015d565b9091565b90620000bf9162000218565b6200015a90620001f6906001600160a01b031682565b6001600160a01b031690565b6200015a90620001e0565b6200015a9062000202565b906200024e6200026992620002366200022f600090565b826200049e565b61012052620002476001846200049e565b6101405290565b620002626200025b825190565b9160200190565b2060e05290565b620002766200025b825190565b20610100524660a0526200028962000650565b60805262000297306200020d565b60c052565b6200015a6200015a6200015a9290565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015620002e5575b6020831014620002df57565b620002ac565b91607f1691620002d3565b9190620003056200015a6200031d936200029c565b90835460001960089290920291821b191691901b1790565b9055565b620000bf91600091620002f0565b8181106200033b575050565b806200034b600060019362000321565b016200032f565b9190601f81116200036257505050565b62000376620000bf93600052602060002090565b906020601f8401819004830193106200039a575b6020601f9091010401906200032f565b90915081906200038a565b90620003af815190565b906001600160401b038211620000a257620003d782620003d08554620002c2565b8562000352565b602090601f831160011462000416576200031d9291600091836200040a575b5050600019600883021c1916906002021790565b015190503880620003f6565b601f198316916200042c85600052602060002090565b9260005b8181106200046d5750916002939185600196941062000453575b50505002019055565b01516000196008601f8516021c191690553880806200044a565b9193602060018192878701518155019501920162000430565b90620000bf91620003a5565b6200015a60ff6200029c565b8051620004b4620004b060206200029c565b9190565b1015620004c7576200015a915062000582565b6000620004d5620004dc9390565b0162000486565b6200015a6200015a62000492565b6200050f62000519602093620000de9362000503815190565b80835293849260200190565b95869101620000e2565b601f01601f191690565b60208082526200015a92910190620004ea565b620005526200054e62000547835190565b9260200190565b5190565b906020811062000560575090565b6200057390600019906020036008021b90565b1690565b6200015a906200029c565b806200058c825190565b6200059c620004b0601f6200029c565b11620005d157506200015a81620005ca620005c5620005bf6200015a9562000536565b62000577565b915190565b176200029c565b620005f790620005e060405190565b63305a27a960e01b81529182916004830162000523565b0390fd5b9052565b620005fb90620001f6565b90959492620000bf946200064162000648926200063a6080966200063360a088019c6000890152565b6020870152565b6040850152565b6060830152565b0190620005ff565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620006bb6200067f60e05190565b6101005192620006ae4662000694306200020d565b906200069f60405190565b9687956020870195866200060a565b9081038252038262000080565b620006c86200025b825190565b209056fe6080604052600436101561001257600080fd5b60003560e01c6384b0196e03610032576101c3565b600091031261003257565b600080fd5b60005b83811061004a5750506000910152565b818101518382015260200161003a565b61007b6100846020936100ac9361006f815190565b80835293849260200190565b95869101610037565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b0190565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b906100ec6100e56100db845190565b8084529260200190565b9260200190565b9060005b8181106100fd5750505090565b90919261011a6101136001928651815260200190565b9460200190565b9291016100f0565b9395919461019261018a6101b69561017c6101af956100c99c9a61016f60e08c019260008d01907fff00000000000000000000000000000000000000000000000000000000000000169052565b8a820360208c015261005a565b9088820360408a015261005a565b976060870152565b73ffffffffffffffffffffffffffffffffffffffff166080850152565b60a0830152565b60c08184039101526100cc565b34610032576101d3366004610027565b6101f76101de61033c565b936101ee97959793919360405190565b97889788610122565b0390f35b6100b06100c96100c99273ffffffffffffffffffffffffffffffffffffffff1690565b6100c9906101fb565b6100c99061021e565b6100c96100c96100c99290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810190811067ffffffffffffffff8211176102ac57604052565b61023d565b906102c56102be60405190565b928361026c565b565b67ffffffffffffffff81116102ac5760208091020190565b906102f16102ec836102c7565b6102b1565b918252565b369037565b906102c561031161030b846102df565b936102c7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001602084016102f6565b60009061036b7f0000000000000000000000000000000000000000000000000000000000000000835b90610502565b916103977f00000000000000000000000000000000000000000000000000000000000000006001610365565b9146916103a330610227565b916103be6103b96103b384610230565b93610230565b6102fb565b7f0f00000000000000000000000000000000000000000000000000000000000000969594939291565b6100c960ff610230565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b9060016002830492168015610440575b602083101461043b57565b6103f1565b91607f1691610430565b8054600093929161046761045d83610420565b8085529360200190565b91600181169081156104b9575060011461048057505050565b6104939192939450600052602060002090565b916000925b8184106104a55750500190565b805484840152602090930192600101610498565b92949550505060ff1916825215156020020190565b906100c99161044a565b906102c56104f2926104e960405190565b938480926104ce565b038361026c565b6100c9906104d8565b90816105166105126100c96103e7565b9190565b1461052557506100c99061058d565b6100c991506104f9565b67ffffffffffffffff81116102ac57602090601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b906102f16102ec8361052f565b906102c56103116105878461056a565b9361052f565b610596816105bc565b9060206105aa6105a582610230565b610577565b92835282015290565b6100c990610230565b6105cf6105d4916105cb600090565b5090565b6105b3565b6105de60ff610230565b166105e9601f610230565b81116105f25790565b6040517fb3512b0c000000000000000000000000000000000000000000000000000000008152600490fdfea164736f6c6343000814000a";

type MIP712ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MIP712ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MIP712__factory extends ContractFactory {
  constructor(...args: MIP712ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    version_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MIP712> {
    return super.deploy(name_, version_, overrides || {}) as Promise<MIP712>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    version_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, version_, overrides || {});
  }
  override attach(address: string): MIP712 {
    return super.attach(address) as MIP712;
  }
  override connect(signer: Signer): MIP712__factory {
    return super.connect(signer) as MIP712__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MIP712Interface {
    return new utils.Interface(_abi) as MIP712Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MIP712 {
    return new Contract(address, _abi, signerOrProvider) as MIP712;
  }
}
