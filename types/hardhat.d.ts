/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesUtils__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSRegistry__factory>;
    getContractFactory(
      name: "FIFSRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FIFSRegistrar__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABIResolver__factory>;
    getContractFactory(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddrResolver__factory>;
    getContractFactory(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentHashResolver__factory>;
    getContractFactory(
      name: "DNSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSResolver__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "IVersionableResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersionableResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PubkeyResolver__factory>;
    getContractFactory(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TextResolver__factory>;
    getContractFactory(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicResolver__factory>;
    getContractFactory(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverBase__factory>;
    getContractFactory(
      name: "IReverseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReverseRegistrar__factory>;
    getContractFactory(
      name: "ReverseClaimer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseClaimer__factory>;
    getContractFactory(
      name: "IMetadataService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetadataService__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "INameWrapperUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapperUpgrade__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC5267Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "IMarketService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketService__factory>;
    getContractFactory(
      name: "IMarketServicePackage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketServicePackage__factory>;
    getContractFactory(
      name: "IMarketServiceUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketServiceUser__factory>;
    getContractFactory(
      name: "IMRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMRC20__factory>;
    getContractFactory(
      name: "IMRC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMRC721__factory>;
    getContractFactory(
      name: "MarketService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketService__factory>;
    getContractFactory(
      name: "MAvatar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MAvatar__factory>;
    getContractFactory(
      name: "MGiftCard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MGiftCard__factory>;
    getContractFactory(
      name: "MIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MIP712__factory>;
    getContractFactory(
      name: "MLuckyMoney",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MLuckyMoney__factory>;
    getContractFactory(
      name: "MRC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MRC721__factory>;
    getContractFactory(
      name: "Package",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Package__factory>;
    getContractFactory(
      name: "PGXStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PGXStaking__factory>;
    getContractFactory(
      name: "TokenMapperRegistering",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMapperRegistering__factory>;
    getContractFactory(
      name: "MAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "MIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MIP712Upgradeable__factory>;
    getContractFactory(
      name: "MRC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MRC20Upgradeable__factory>;
    getContractFactory(
      name: "MRC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MRC721Upgradeable__factory>;
    getContractFactory(
      name: "WrapMRC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapMRC20Upgradeable__factory>;
    getContractFactory(
      name: "WrapMRC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapMRC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Factory__factory>;
    getContractFactory(
      name: "ERC721Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Factory__factory>;
    getContractFactory(
      name: "MRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MRC20__factory>;
    getContractFactory(
      name: "WrapMRC721UpgradeableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapMRC721UpgradeableTest__factory>;

    getContractAt(
      name: "BytesUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BytesUtils>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "ENS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "ENSRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSRegistry>;
    getContractAt(
      name: "FIFSRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FIFSRegistrar>;
    getContractAt(
      name: "IMulticallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "Multicallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "ABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ABIResolver>;
    getContractAt(
      name: "AddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddrResolver>;
    getContractAt(
      name: "ContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentHashResolver>;
    getContractAt(
      name: "DNSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSResolver>;
    getContractAt(
      name: "IABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "InterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "IVersionableResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersionableResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "PubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PubkeyResolver>;
    getContractAt(
      name: "TextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TextResolver>;
    getContractAt(
      name: "PublicResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicResolver>;
    getContractAt(
      name: "ResolverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverBase>;
    getContractAt(
      name: "IReverseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReverseRegistrar>;
    getContractAt(
      name: "ReverseClaimer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseClaimer>;
    getContractAt(
      name: "IMetadataService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetadataService>;
    getContractAt(
      name: "INameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "INameWrapperUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapperUpgrade>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC5267Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "IMarketService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketService>;
    getContractAt(
      name: "IMarketServicePackage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketServicePackage>;
    getContractAt(
      name: "IMarketServiceUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketServiceUser>;
    getContractAt(
      name: "IMRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMRC20>;
    getContractAt(
      name: "IMRC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMRC721>;
    getContractAt(
      name: "MarketService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketService>;
    getContractAt(
      name: "MAvatar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MAvatar>;
    getContractAt(
      name: "MGiftCard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MGiftCard>;
    getContractAt(
      name: "MIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MIP712>;
    getContractAt(
      name: "MLuckyMoney",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MLuckyMoney>;
    getContractAt(
      name: "MRC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MRC721>;
    getContractAt(
      name: "Package",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Package>;
    getContractAt(
      name: "PGXStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PGXStaking>;
    getContractAt(
      name: "TokenMapperRegistering",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMapperRegistering>;
    getContractAt(
      name: "MAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MAccessControlUpgradeable>;
    getContractAt(
      name: "MIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MIP712Upgradeable>;
    getContractAt(
      name: "MRC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MRC20Upgradeable>;
    getContractAt(
      name: "MRC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MRC721Upgradeable>;
    getContractAt(
      name: "WrapMRC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapMRC20Upgradeable>;
    getContractAt(
      name: "WrapMRC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapMRC721Upgradeable>;
    getContractAt(
      name: "ERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Factory>;
    getContractAt(
      name: "ERC721Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Factory>;
    getContractAt(
      name: "MRC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MRC20>;
    getContractAt(
      name: "WrapMRC721UpgradeableTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapMRC721UpgradeableTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
