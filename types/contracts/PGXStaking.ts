/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace PGXStaking {
  export type PackageStruct = {
    isActive: PromiseOrValue<boolean>;
    packageId: PromiseOrValue<BigNumberish>;
    lockedTime: PromiseOrValue<BigNumberish>;
    rewardPercent: PromiseOrValue<BigNumberish>;
    minStakeAmount: PromiseOrValue<BigNumberish>;
  };

  export type PackageStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isActive: boolean;
    packageId: BigNumber;
    lockedTime: BigNumber;
    rewardPercent: BigNumber;
    minStakeAmount: BigNumber;
  };

  export type StakedInfoStruct = {
    user: PromiseOrValue<string>;
    unlockedTime: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    stakeId: PromiseOrValue<BigNumberish>;
    unStaked: PromiseOrValue<boolean>;
  };

  export type StakedInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    user: string;
    unlockedTime: BigNumber;
    amount: BigNumber;
    reward: BigNumber;
    stakeId: BigNumber;
    unStaked: boolean;
  };
}

export interface PGXStakingInterface extends utils.Interface {
  functions: {
    "PGX()": FunctionFragment;
    "addPackage(uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getPackages()": FunctionFragment;
    "owner()": FunctionFragment;
    "packageInfos(uint256)": FunctionFragment;
    "removePackage(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stake(uint256,uint256,address)": FunctionFragment;
    "stakeOfOwnerByIndex(address,uint256)": FunctionFragment;
    "stakedInfos(uint256)": FunctionFragment;
    "stakesOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePackage((bool,uint256,uint256,uint256,uint256))": FunctionFragment;
    "withdraw(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PGX"
      | "addPackage"
      | "balanceOf"
      | "getPackages"
      | "owner"
      | "packageInfos"
      | "removePackage"
      | "renounceOwnership"
      | "stake"
      | "stakeOfOwnerByIndex"
      | "stakedInfos"
      | "stakesOf"
      | "totalSupply"
      | "transferOwnership"
      | "updatePackage"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PGX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPackage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packageInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePackage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePackage",
    values: [PGXStaking.PackageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "PGX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPackage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPackages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packageInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogStake(uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "LogWithdrawn(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogStakeEventObject {
  stakeId: BigNumber;
  user: string;
  amount: BigNumber;
  reward: BigNumber;
  unlockTime: BigNumber;
  referral: string;
}
export type LogStakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
  LogStakeEventObject
>;

export type LogStakeEventFilter = TypedEventFilter<LogStakeEvent>;

export interface LogWithdrawnEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  reward: BigNumber;
}
export type LogWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogWithdrawnEventObject
>;

export type LogWithdrawnEventFilter = TypedEventFilter<LogWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PGXStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PGXStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PGX(overrides?: CallOverrides): Promise<[string]>;

    addPackage(
      lockedTime: PromiseOrValue<BigNumberish>,
      rewardPercent: PromiseOrValue<BigNumberish>,
      minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPackages(
      overrides?: CallOverrides
    ): Promise<
      [PGXStaking.PackageStructOutput[]] & {
        _packages: PGXStaking.PackageStructOutput[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    packageInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        packageId: BigNumber;
        lockedTime: BigNumber;
        rewardPercent: BigNumber;
        minStakeAmount: BigNumber;
      }
    >;

    removePackage(
      packageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      packageId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        user: string;
        unlockedTime: BigNumber;
        amount: BigNumber;
        reward: BigNumber;
        stakeId: BigNumber;
        unStaked: boolean;
      }
    >;

    stakesOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PGXStaking.StakedInfoStructOutput[]] & {
        infos: PGXStaking.StakedInfoStructOutput[];
      }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePackage(
      _package: PGXStaking.PackageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PGX(overrides?: CallOverrides): Promise<string>;

  addPackage(
    lockedTime: PromiseOrValue<BigNumberish>,
    rewardPercent: PromiseOrValue<BigNumberish>,
    minStakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPackages(
    overrides?: CallOverrides
  ): Promise<PGXStaking.PackageStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  packageInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isActive: boolean;
      packageId: BigNumber;
      lockedTime: BigNumber;
      rewardPercent: BigNumber;
      minStakeAmount: BigNumber;
    }
  >;

  removePackage(
    packageId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    packageId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      user: string;
      unlockedTime: BigNumber;
      amount: BigNumber;
      reward: BigNumber;
      stakeId: BigNumber;
      unStaked: boolean;
    }
  >;

  stakesOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PGXStaking.StakedInfoStructOutput[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePackage(
    _package: PGXStaking.PackageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    stakeIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PGX(overrides?: CallOverrides): Promise<string>;

    addPackage(
      lockedTime: PromiseOrValue<BigNumberish>,
      rewardPercent: PromiseOrValue<BigNumberish>,
      minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPackages(
      overrides?: CallOverrides
    ): Promise<PGXStaking.PackageStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    packageInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        packageId: BigNumber;
        lockedTime: BigNumber;
        rewardPercent: BigNumber;
        minStakeAmount: BigNumber;
      }
    >;

    removePackage(
      packageId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stake(
      packageId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        user: string;
        unlockedTime: BigNumber;
        amount: BigNumber;
        reward: BigNumber;
        stakeId: BigNumber;
        unStaked: boolean;
      }
    >;

    stakesOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PGXStaking.StakedInfoStructOutput[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePackage(
      _package: PGXStaking.PackageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogStake(uint256,address,uint256,uint256,uint256,address)"(
      stakeId?: null,
      user?: null,
      amount?: null,
      reward?: null,
      unlockTime?: null,
      referral?: null
    ): LogStakeEventFilter;
    LogStake(
      stakeId?: null,
      user?: null,
      amount?: null,
      reward?: null,
      unlockTime?: null,
      referral?: null
    ): LogStakeEventFilter;

    "LogWithdrawn(address,uint256,uint256,uint256)"(
      user?: null,
      stakeId?: null,
      amount?: null,
      reward?: null
    ): LogWithdrawnEventFilter;
    LogWithdrawn(
      user?: null,
      stakeId?: null,
      amount?: null,
      reward?: null
    ): LogWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PGX(overrides?: CallOverrides): Promise<BigNumber>;

    addPackage(
      lockedTime: PromiseOrValue<BigNumberish>,
      rewardPercent: PromiseOrValue<BigNumberish>,
      minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPackages(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    packageInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePackage(
      packageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      packageId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePackage(
      _package: PGXStaking.PackageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PGX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPackage(
      lockedTime: PromiseOrValue<BigNumberish>,
      rewardPercent: PromiseOrValue<BigNumberish>,
      minStakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPackages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packageInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePackage(
      packageId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      packageId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePackage(
      _package: PGXStaking.PackageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
