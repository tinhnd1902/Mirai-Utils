/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMarketService {
  export type NFTStruct = {
    isSupport: PromiseOrValue<boolean>;
    listingFee: PromiseOrValue<BigNumberish>;
    auctionFee: PromiseOrValue<BigNumberish>;
    nftTeam: PromiseOrValue<string>;
    percentNFTTeam: PromiseOrValue<BigNumberish>;
  };

  export type NFTStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    isSupport: boolean;
    listingFee: BigNumber;
    auctionFee: BigNumber;
    nftTeam: string;
    percentNFTTeam: BigNumber;
  };
}

export interface IMarketServiceInterface extends utils.Interface {
  functions: {
    "bid(uint256,uint256)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "createAuction(address,uint256,uint256,address,uint256)": FunctionFragment;
    "createAuctionBySig(address,uint256,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "endAuctionBySig(uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getCurrentBid(uint256,address)": FunctionFragment;
    "list(address,uint256,uint256,address)": FunctionFragment;
    "listBySig(address,uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "unList(uint256)": FunctionFragment;
    "unListBySig(uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "updatePrice(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bid"
      | "buy"
      | "createAuction"
      | "createAuctionBySig"
      | "endAuction"
      | "endAuctionBySig"
      | "getCurrentBid"
      | "list"
      | "listBySig"
      | "unList"
      | "unListBySig"
      | "updatePrice"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctionBySig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuctionBySig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listBySig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unListBySig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuctionBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endAuctionBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listBySig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unListBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddNFT(address,bool)": EventFragment;
    "Bid(uint256,address,uint256)": EventFragment;
    "Currency(address,bool)": EventFragment;
    "EndAuction(uint256)": EventFragment;
    "ForceReturn(bool)": EventFragment;
    "Listed(uint256,address,uint256,bool)": EventFragment;
    "SetNFT(address,tuple)": EventFragment;
    "SetPercentProfit(uint256)": EventFragment;
    "SetTeam(address)": EventFragment;
    "Sold(uint256,address,uint256,address,bool)": EventFragment;
    "SoldPackage(uint256,address,uint256,address,uint256)": EventFragment;
    "Unlisted(uint256)": EventFragment;
    "UpdatePrice(uint256,uint256)": EventFragment;
    "Withdraw(uint256,address,address,uint256)": EventFragment;
    "WithdrawProfit(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Currency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPercentProfit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTeam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldPackage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProfit"): EventFragment;
}

export interface AddNFTEventObject {
  nft: string;
  status: boolean;
}
export type AddNFTEvent = TypedEvent<[string, boolean], AddNFTEventObject>;

export type AddNFTEventFilter = TypedEventFilter<AddNFTEvent>;

export interface BidEventObject {
  auctionId: BigNumber;
  bidder: string;
  amount: BigNumber;
}
export type BidEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface CurrencyEventObject {
  currency: string;
  status: boolean;
}
export type CurrencyEvent = TypedEvent<[string, boolean], CurrencyEventObject>;

export type CurrencyEventFilter = TypedEventFilter<CurrencyEvent>;

export interface EndAuctionEventObject {
  auctionId: BigNumber;
}
export type EndAuctionEvent = TypedEvent<[BigNumber], EndAuctionEventObject>;

export type EndAuctionEventFilter = TypedEventFilter<EndAuctionEvent>;

export interface ForceReturnEventObject {
  force: boolean;
}
export type ForceReturnEvent = TypedEvent<[boolean], ForceReturnEventObject>;

export type ForceReturnEventFilter = TypedEventFilter<ForceReturnEvent>;

export interface ListedEventObject {
  listingId: BigNumber;
  nft: string;
  tokenId: BigNumber;
  auction: boolean;
}
export type ListedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  ListedEventObject
>;

export type ListedEventFilter = TypedEventFilter<ListedEvent>;

export interface SetNFTEventObject {
  nft: string;
  listingFee: IMarketService.NFTStructOutput;
}
export type SetNFTEvent = TypedEvent<
  [string, IMarketService.NFTStructOutput],
  SetNFTEventObject
>;

export type SetNFTEventFilter = TypedEventFilter<SetNFTEvent>;

export interface SetPercentProfitEventObject {
  percentChainVerseTeam: BigNumber;
}
export type SetPercentProfitEvent = TypedEvent<
  [BigNumber],
  SetPercentProfitEventObject
>;

export type SetPercentProfitEventFilter =
  TypedEventFilter<SetPercentProfitEvent>;

export interface SetTeamEventObject {
  chainverseTeam: string;
}
export type SetTeamEvent = TypedEvent<[string], SetTeamEventObject>;

export type SetTeamEventFilter = TypedEventFilter<SetTeamEvent>;

export interface SoldEventObject {
  listingId: BigNumber;
  nft: string;
  tokenId: BigNumber;
  buyer: string;
  auction: boolean;
}
export type SoldEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, boolean],
  SoldEventObject
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export interface SoldPackageEventObject {
  listingId: BigNumber;
  nft: string;
  tokenId: BigNumber;
  buyer: string;
  amount: BigNumber;
}
export type SoldPackageEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  SoldPackageEventObject
>;

export type SoldPackageEventFilter = TypedEventFilter<SoldPackageEvent>;

export interface UnlistedEventObject {
  listingId: BigNumber;
}
export type UnlistedEvent = TypedEvent<[BigNumber], UnlistedEventObject>;

export type UnlistedEventFilter = TypedEventFilter<UnlistedEvent>;

export interface UpdatePriceEventObject {
  listingId: BigNumber;
  price: BigNumber;
}
export type UpdatePriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatePriceEventObject
>;

export type UpdatePriceEventFilter = TypedEventFilter<UpdatePriceEvent>;

export interface WithdrawEventObject {
  auctionId: BigNumber;
  bidder: string;
  currency: string;
  bid: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawProfitEventObject {
  nft: string;
  currency: string;
  amount: BigNumber;
  receiver: string;
}
export type WithdrawProfitEvent = TypedEvent<
  [string, string, BigNumber, string],
  WithdrawProfitEventObject
>;

export type WithdrawProfitEventFilter = TypedEventFilter<WithdrawProfitEvent>;

export interface IMarketService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuctionBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuctionBySig(
      auctionId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentBid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    list(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unList(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unListBySig(
      listingId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    auctionId: PromiseOrValue<BigNumberish>,
    bidPrice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    listingId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    initValue: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuctionBySig(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    initValue: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    auctionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuctionBySig(
    auctionId: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentBid(
    auctionId: PromiseOrValue<BigNumberish>,
    bidder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  list(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listBySig(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unList(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unListBySig(
    listingId: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    listingId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    auctionId: PromiseOrValue<BigNumberish>,
    bidder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buy(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuctionBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endAuctionBySig(
      auctionId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentBid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unList(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unListBySig(
      listingId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePrice(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddNFT(address,bool)"(nft?: null, status?: null): AddNFTEventFilter;
    AddNFT(nft?: null, status?: null): AddNFTEventFilter;

    "Bid(uint256,address,uint256)"(
      auctionId?: null,
      bidder?: null,
      amount?: null
    ): BidEventFilter;
    Bid(auctionId?: null, bidder?: null, amount?: null): BidEventFilter;

    "Currency(address,bool)"(
      currency?: null,
      status?: null
    ): CurrencyEventFilter;
    Currency(currency?: null, status?: null): CurrencyEventFilter;

    "EndAuction(uint256)"(auctionId?: null): EndAuctionEventFilter;
    EndAuction(auctionId?: null): EndAuctionEventFilter;

    "ForceReturn(bool)"(force?: null): ForceReturnEventFilter;
    ForceReturn(force?: null): ForceReturnEventFilter;

    "Listed(uint256,address,uint256,bool)"(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      auction?: null
    ): ListedEventFilter;
    Listed(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      auction?: null
    ): ListedEventFilter;

    "SetNFT(address,tuple)"(nft?: null, listingFee?: null): SetNFTEventFilter;
    SetNFT(nft?: null, listingFee?: null): SetNFTEventFilter;

    "SetPercentProfit(uint256)"(
      percentChainVerseTeam?: null
    ): SetPercentProfitEventFilter;
    SetPercentProfit(percentChainVerseTeam?: null): SetPercentProfitEventFilter;

    "SetTeam(address)"(chainverseTeam?: null): SetTeamEventFilter;
    SetTeam(chainverseTeam?: null): SetTeamEventFilter;

    "Sold(uint256,address,uint256,address,bool)"(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      buyer?: null,
      auction?: null
    ): SoldEventFilter;
    Sold(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      buyer?: null,
      auction?: null
    ): SoldEventFilter;

    "SoldPackage(uint256,address,uint256,address,uint256)"(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): SoldPackageEventFilter;
    SoldPackage(
      listingId?: null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): SoldPackageEventFilter;

    "Unlisted(uint256)"(listingId?: null): UnlistedEventFilter;
    Unlisted(listingId?: null): UnlistedEventFilter;

    "UpdatePrice(uint256,uint256)"(
      listingId?: null,
      price?: null
    ): UpdatePriceEventFilter;
    UpdatePrice(listingId?: null, price?: null): UpdatePriceEventFilter;

    "Withdraw(uint256,address,address,uint256)"(
      auctionId?: null,
      bidder?: null,
      currency?: null,
      bid?: null
    ): WithdrawEventFilter;
    Withdraw(
      auctionId?: null,
      bidder?: null,
      currency?: null,
      bid?: null
    ): WithdrawEventFilter;

    "WithdrawProfit(address,address,uint256,address)"(
      nft?: null,
      currency?: null,
      amount?: null,
      receiver?: null
    ): WithdrawProfitEventFilter;
    WithdrawProfit(
      nft?: null,
      currency?: null,
      amount?: null,
      receiver?: null
    ): WithdrawProfitEventFilter;
  };

  estimateGas: {
    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuctionBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuctionBySig(
      auctionId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentBid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unList(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unListBySig(
      listingId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuctionBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      initValue: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      auctionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuctionBySig(
      auctionId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentBid(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listBySig(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unList(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unListBySig(
      listingId: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      listingId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      auctionId: PromiseOrValue<BigNumberish>,
      bidder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
