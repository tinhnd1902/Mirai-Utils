/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ENSDeployerInterface extends utils.Interface {
  functions: {
    "ADDR_LABEL()": FunctionFragment;
    "RESOLVER_LABEL()": FunctionFragment;
    "REVERSE_REGISTRAR_LABEL()": FunctionFragment;
    "TLD_LABEL()": FunctionFragment;
    "ens()": FunctionFragment;
    "fifsRegistrar()": FunctionFragment;
    "namehash(bytes32,bytes32)": FunctionFragment;
    "publicResolver()": FunctionFragment;
    "reverseClaimer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDR_LABEL"
      | "RESOLVER_LABEL"
      | "REVERSE_REGISTRAR_LABEL"
      | "TLD_LABEL"
      | "ens"
      | "fifsRegistrar"
      | "namehash"
      | "publicResolver"
      | "reverseClaimer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDR_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESOLVER_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERSE_REGISTRAR_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TLD_LABEL", values?: undefined): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fifsRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "namehash",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverseClaimer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADDR_LABEL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RESOLVER_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERSE_REGISTRAR_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TLD_LABEL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fifsRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "namehash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseClaimer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ENSDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ENSDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDR_LABEL(overrides?: CallOverrides): Promise<[string]>;

    RESOLVER_LABEL(overrides?: CallOverrides): Promise<[string]>;

    REVERSE_REGISTRAR_LABEL(overrides?: CallOverrides): Promise<[string]>;

    TLD_LABEL(overrides?: CallOverrides): Promise<[string]>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    fifsRegistrar(overrides?: CallOverrides): Promise<[string]>;

    namehash(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicResolver(overrides?: CallOverrides): Promise<[string]>;

    reverseClaimer(overrides?: CallOverrides): Promise<[string]>;
  };

  ADDR_LABEL(overrides?: CallOverrides): Promise<string>;

  RESOLVER_LABEL(overrides?: CallOverrides): Promise<string>;

  REVERSE_REGISTRAR_LABEL(overrides?: CallOverrides): Promise<string>;

  TLD_LABEL(overrides?: CallOverrides): Promise<string>;

  ens(overrides?: CallOverrides): Promise<string>;

  fifsRegistrar(overrides?: CallOverrides): Promise<string>;

  namehash(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  publicResolver(overrides?: CallOverrides): Promise<string>;

  reverseClaimer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADDR_LABEL(overrides?: CallOverrides): Promise<string>;

    RESOLVER_LABEL(overrides?: CallOverrides): Promise<string>;

    REVERSE_REGISTRAR_LABEL(overrides?: CallOverrides): Promise<string>;

    TLD_LABEL(overrides?: CallOverrides): Promise<string>;

    ens(overrides?: CallOverrides): Promise<string>;

    fifsRegistrar(overrides?: CallOverrides): Promise<string>;

    namehash(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    publicResolver(overrides?: CallOverrides): Promise<string>;

    reverseClaimer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADDR_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    RESOLVER_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    REVERSE_REGISTRAR_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    TLD_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    fifsRegistrar(overrides?: CallOverrides): Promise<BigNumber>;

    namehash(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicResolver(overrides?: CallOverrides): Promise<BigNumber>;

    reverseClaimer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDR_LABEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESOLVER_LABEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVERSE_REGISTRAR_LABEL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TLD_LABEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fifsRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    namehash(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reverseClaimer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
